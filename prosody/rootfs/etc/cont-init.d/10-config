#!/usr/bin/with-contenv bash

# Настройки LDAP (если нужно)
if [[ ! -f /etc/saslauthd.conf ]] && [[ "$AUTH_TYPE" == "ldap" ]]; then
    tpl /defaults/saslauthd.conf > /etc/saslauthd.conf
    mkdir -pm777 /var/run/saslauthd
    adduser prosody sasl
    echo >> /etc/ldap/ldap.conf "TLS_REQCERT allow"
fi

PROSODY_CFG="/config/prosody.cfg.lua"
PROSODY_SITE_CFG="jitsi-meet.cfg.lua"

# Создание директорий и настройка прав
[[ ! -d /config/data ]] && mkdir -pm 750 /config/data
[[ "$(stat -c %U /config)" != "prosody" ]] && chown -R prosody /config
[[ "$(stat -c %U /prosody-plugins)" != "prosody" ]] && chown -R prosody /prosody-plugins
[[ "$(stat -c %U /prosody-plugins-custom)" != "prosody" ]] && chown -R prosody /prosody-plugins-custom
[[ "$(stat -c %U /prosody-plugins-contrib)" != "prosody" ]] && chown -R prosody /prosody-plugins-contrib

mkdir -p /config/certs /config/conf.d
cp -rn /defaults/* /config

# Установка режима Prosody
[ -z "$PROSODY_MODE" ] && export PROSODY_MODE="client"

if [[ "$PROSODY_MODE" == "visitors" ]]; then
    echo "Prosody visitor mode, using alternate config"
    PROSODY_SITE_CFG="visitors.cfg.lua"
    rm /config/conf.d/jitsi-meet.cfg.lua
    rm /config/conf.d/brewery.cfg.lua
    [ -z "$XMPP_AUTH_DOMAIN" ] && export XMPP_AUTH_DOMAIN="auth.meet.jitsi"
    export PROSODY_ADMINS="focus@$XMPP_AUTH_DOMAIN"
elif [[ "$PROSODY_MODE" == "brewery" ]]; then
    echo "Prosody brewery mode, using alternate config"
    PROSODY_SITE_CFG="brewery.cfg.lua"
    rm /config/conf.d/jitsi-meet.cfg.lua
    rm /config/conf.d/visitors.cfg.lua
    [ -z "$JVB_XMPP_AUTH_DOMAIN" ] && export JVB_XMPP_AUTH_DOMAIN="auth.meet.jitsi"
    export XMPP_AUTH_DOMAIN="$JVB_XMPP_AUTH_DOMAIN"
    export PROSODY_C2S_REQUIRE_ENCRYPTION="true"
    mkdir -p /config/rules.d
    tpl /defaults/rules.d/jvb_muc_presence_filter.pfw > /config/rules.d/jvb_muc_presence_filter.pfw
else
    echo "Prosody normal mode, using default config"
    PROSODY_SITE_CFG="jitsi-meet.cfg.lua"
    rm /config/conf.d/visitors.cfg.lua
    rm /config/conf.d/brewery.cfg.lua
fi

# Экспорт переменных для tpl
export XMPP_DOMAINS="${XMPP_DOMAINS}"
export XMPP_AUTH_DOMAIN="${XMPP_AUTH_DOMAIN:-auth.meet.jitsi}"
export XMPP_RECORDER_DOMAIN="${XMPP_RECORDER_DOMAIN:-recorder.meet.jitsi}"
export JWT_APP_ID="${JWT_APP_ID}"
export JWT_APP_SECRET="${JWT_APP_SECRET}"

# Проверка обязательных переменных
if [[ -z $JICOFO_AUTH_PASSWORD ]]; then
    echo 'FATAL ERROR: Jicofo auth password must be set'
    exit 1
fi
if [[ -z $JVB_AUTH_PASSWORD ]]; then
    echo 'FATAL ERROR: JVB auth password must be set'
    exit 1
fi
if [[ -z $XMPP_DOMAINS ]]; then
    echo 'FATAL ERROR: XMPP_DOMAINS must be set'
    exit 1
fi
if [[ -z $JWT_APP_ID ]]; then
    echo 'FATAL ERROR: JWT_APP_ID must be set'
    exit 1
fi
if [[ -z $JWT_APP_SECRET ]]; then
    echo 'FATAL ERROR: JWT_APP_SECRET must be set'
    exit 1
fi

# Копирование и обработка шаблона prosody.cfg.lua
tpl /defaults/prosody.cfg.lua > "$PROSODY_CFG"

# Добавление VirtualHost для каждого домена из XMPP_DOMAINS
IFS=',' read -r -a DOMAINS <<< "$XMPP_DOMAINS"
for DOMAIN in "${DOMAINS[@]}"; do
    cat <<EOF >> "$PROSODY_CFG"
VirtualHost "$DOMAIN"
    authentication = "token"
    app_id = "$JWT_APP_ID"
    app_secret = "$JWT_APP_SECRET"
    allow_empty_token = false
    ssl = {
        key = "/config/certs/$DOMAIN.key";
        certificate = "/config/certs/$DOMAIN.crt";
    }
    modules_enabled = {
        "bosh"; "websocket"; "smacks"; "speakerstats"; "conference_duration"; "room_metadata";
        "end_conference"; "muc_lobby_rooms"; "muc_breakout_rooms"; "av_moderation"; "token_verification";
    }
    main_muc = "muc.$DOMAIN"
    lobby_muc = "lobby.$DOMAIN"
    breakout_rooms_muc = "breakout.$DOMAIN"
    speakerstats_component = "speakerstats.$DOMAIN"
    conference_duration_component = "conferenceduration.$DOMAIN"
    end_conference_component = "endconference.$DOMAIN"
    av_moderation_component = "avmoderation.$DOMAIN"
EOF
done

# Копирование и обработка шаблона jitsi-meet.cfg.lua
tpl /defaults/$PROSODY_SITE_CFG > "/config/conf.d/$PROSODY_SITE_CFG"

# Добавление компонентов для первого домена
FIRST_DOMAIN="${DOMAINS[0]}"
cat <<EOF >> "/config/conf.d/$PROSODY_SITE_CFG"
Component "conference.$FIRST_DOMAIN" "muc"
    storage = "memory"
    restrict_room_creation = true
    muc_room_locking = false
    muc_room_default_public_jids = true
    modules_enabled = { "muc_meeting_id"; "muc_domain_mapper"; "polls"; }

Component "focus.$FIRST_DOMAIN" "client_proxy"
    target_address = "focus@$XMPP_AUTH_DOMAIN"

Component "speakerstats.$FIRST_DOMAIN" "speakerstats_component"
    muc_component = "muc.$FIRST_DOMAIN"

Component "conferenceduration.$FIRST_DOMAIN" "conference_duration_component"
    muc_component = "muc.$FIRST_DOMAIN"

Component "endconference.$FIRST_DOMAIN" "end_conference"
    muc_component = "muc.$FIRST_DOMAIN"

Component "avmoderation.$FIRST_DOMAIN" "av_moderation_component"
    muc_component = "muc.$FIRST_DOMAIN"

Component "lobby.$FIRST_DOMAIN" "muc"
    storage = "memory"
    restrict_room_creation = true
    muc_room_locking = false
    muc_room_default_public_jids = true

Component "breakout.$FIRST_DOMAIN" "muc"
    storage = "memory"
    restrict_room_creation = true
    muc_room_locking = false
    muc_room_default_public_jids = true
    modules_enabled = { "muc_meeting_id"; "polls"; }

Component "metadata.$FIRST_DOMAIN" "room_metadata_component"
    muc_component = "muc.$FIRST_DOMAIN"
    breakout_rooms_component = "breakout.$FIRST_DOMAIN"
EOF

# Регистрация пользователей
[ -z "${JIBRI_RECORDER_USER}" ] && export JIBRI_RECORDER_USER=recorder
[ -z "${JIBRI_XMPP_USER}" ] && export JIBRI_XMPP_USER=jibri
[ -z "${JIGASI_XMPP_USER}" ] && export JIGASI_XMPP_USER=jigasi
[ -z "${JVB_AUTH_USER}" ] && export JVB_AUTH_USER=jvb

echo "$JICOFO_AUTH_PASSWORD" | prosodyctl --config "$PROSODY_CFG" register focus "$XMPP_AUTH_DOMAIN" -
echo "$JVB_AUTH_PASSWORD" | prosodyctl --config "$PROSODY_CFG" register "$JVB_AUTH_USER" "$XMPP_AUTH_DOMAIN" -
if [[ ! -z $JIBRI_XMPP_PASSWORD ]]; then
    echo "$JIBRI_XMPP_PASSWORD" | prosodyctl --config "$PROSODY_CFG" register "$JIBRI_XMPP_USER" "$XMPP_AUTH_DOMAIN" -
fi
if [[ ! -z $JIGASI_XMPP_PASSWORD ]]; then
    echo "$JIGASI_XMPP_PASSWORD" | prosodyctl --config "$PROSODY_CFG" register "$JIGASI_XMPP_USER" "$XMPP_AUTH_DOMAIN" -
fi

# Генерация сертификатов для всех доменов
for DOMAIN in "${DOMAINS[@]}"; do
    if [[ ! -f /config/certs/$DOMAIN.crt ]]; then
        echo "Generating certificate for $DOMAIN"
        echo | prosodyctl --config "$PROSODY_CFG" cert generate "$DOMAIN"
        cp -f /var/lib/prosody/"$DOMAIN.crt" /config/certs/"$DOMAIN.crt"
        cp -f /var/lib/prosody/"$DOMAIN.key" /config/certs/"$DOMAIN.key"
        chown prosody:prosody /config/certs/"$DOMAIN".{crt,key}
        chmod 640 /config/certs/"$DOMAIN".{crt,key}
    fi
done

if [[ ! -f /config/certs/$XMPP_AUTH_DOMAIN.crt ]]; then
    echo "Generating certificate for $XMPP_AUTH_DOMAIN"
    echo | prosodyctl --config "$PROSODY_CFG" cert generate "$XMPP_AUTH_DOMAIN"
    cp -f /var/lib/prosody/"$XMPP_AUTH_DOMAIN.crt" /config/certs/"$XMPP_AUTH_DOMAIN.crt"
    cp -f /var/lib/prosody/"$XMPP_AUTH_DOMAIN.key" /config/certs/"$XMPP_AUTH_DOMAIN.key"
    chown prosody:prosody /config/certs/"$XMPP_AUTH_DOMAIN".{crt,key}
    chmod 640 /config/certs/"$XMPP_AUTH_DOMAIN".{crt,key}
fi

if [[ ! -f /config/certs/$XMPP_RECORDER_DOMAIN.crt ]]; then
    echo "Generating certificate for $XMPP_RECORDER_DOMAIN"
    echo | prosodyctl --config "$PROSODY_CFG" cert generate "$XMPP_RECORDER_DOMAIN"
    cp -f /var/lib/prosody/"$XMPP_RECORDER_DOMAIN.crt" /config/certs/"$XMPP_RECORDER_DOMAIN.crt"
    cp -f /var/lib/prosody/"$XMPP_RECORDER_DOMAIN.key" /config/certs/"$XMPP_RECORDER_DOMAIN.key"
    chown prosody:prosody /config/certs/"$XMPP_RECORDER_DOMAIN".{crt,key}
    chmod 640 /config/certs/"$XMPP_RECORDER_DOMAIN".{crt,key}
fi

# Очистка .cnf файлов
rm -f /var/lib/prosody/*.cnf
