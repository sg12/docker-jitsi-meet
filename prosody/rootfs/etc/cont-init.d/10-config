#!/usr/bin/with-contenv bash

if [[ ! -f /etc/saslauthd.conf ]] && [[ "$AUTH_TYPE" == "ldap" ]]; then
  tpl /defaults/saslauthd.conf > /etc/saslauthd.conf
  mkdir -pm777 /var/run/saslauthd
  adduser prosody sasl
  echo >> /etc/ldap/ldap.conf "TLS_REQCERT allow"
fi

PROSODY_CFG="/config/prosody.cfg.lua"

if [[ ! -d /config/data ]]; then
    mkdir -pm 750 /config/data
fi

if [[ "$(stat -c %U /config)" != "prosody" ]]; then
    chown -R prosody /config
fi

if [[ "$(stat -c %U /prosody-plugins)" != "prosody" ]]; then
    chown -R prosody /prosody-plugins
fi

if [[ "$(stat -c %U /prosody-plugins-custom)" != "prosody" ]]; then
    chown -R prosody /prosody-plugins-custom
fi

if [[ "$(stat -c %U /prosody-plugins-contrib)" != "prosody" ]]; then
    chown -R prosody /prosody-plugins-contrib
fi

mkdir -p /config/certs
cp -rn /defaults/* /config

[ -z "$PROSODY_MODE" ] && export PROSODY_MODE="client"

if [[ "$PROSODY_MODE" == "visitors" ]]; then
    echo "Prosody visitor mode, using alternate config"
    PROSODY_SITE_CFG="visitors.cfg.lua"
    rm /config/conf.d/jitsi-meet.cfg.lua
    rm /config/conf.d/brewery.cfg.lua
    [ -z "$XMPP_AUTH_DOMAIN" ] && XMPP_AUTH_DOMAIN="auth.meet.jitsi"
    export PROSODY_ADMINS="focus@$XMPP_AUTH_DOMAIN"
elif [[ "$PROSODY_MODE" == "brewery" ]]; then
    echo "Prosody brewery mode, using alternate config"
    PROSODY_SITE_CFG="brewery.cfg.lua"
    rm /config/conf.d/jitsi-meet.cfg.lua
    rm /config/conf.d/visitors.cfg.lua
    [ -z "$JVB_XMPP_AUTH_DOMAIN" ] && JVB_XMPP_AUTH_DOMAIN="auth.meet.jitsi"
    export XMPP_AUTH_DOMAIN="$JVB_XMPP_AUTH_DOMAIN"
    export PROSODY_C2S_REQUIRE_ENCRYPTION="true"
    mkdir -p /config/rules.d
    tpl /defaults/rules.d/jvb_muc_presence_filter.pfw > /config/rules.d/jvb_muc_presence_filter.pfw
else
    echo "Prosody normal mode, using default config"
    PROSODY_SITE_CFG="jitsi-meet.cfg.lua"
    rm /config/conf.d/visitors.cfg.lua
    rm /config/conf.d/brewery.cfg.lua
fi

tpl /defaults/prosody.cfg.lua > $PROSODY_CFG
tpl /defaults/conf.d/$PROSODY_SITE_CFG > /config/conf.d/$PROSODY_SITE_CFG

if [[ -z $JICOFO_AUTH_PASSWORD ]]; then
    echo 'FATAL ERROR: Jicofo auth password must be set'
    exit 1
fi

[ -z "${JIBRI_RECORDER_USER}" ] && export JIBRI_RECORDER_USER=recorder
[ -z "${JIBRI_XMPP_USER}" ] && export JIBRI_XMPP_USER=jibri
[ -z "${JIGASI_XMPP_USER}" ] && export JIGASI_XMPP_USER=jigasi
[ -z "${JVB_AUTH_USER}" ] && export JVB_AUTH_USER=jvb
[ -z "${XMPP_DOMAIN}" ] && export XMPP_DOMAIN=meet.jitsi
[ -z "${XMPP_AUTH_DOMAIN}" ] && export XMPP_AUTH_DOMAIN=auth.meet.jitsi
[ -z "${XMPP_HIDDEN_DOMAIN}" ] && export XMPP_HIDDEN_DOMAIN="$XMPP_RECORDER_DOMAIN"
[ -z "${XMPP_HIDDEN_DOMAIN}" ] && export XMPP_HIDDEN_DOMAIN=hidden.meet.jitsi

prosodyctl --config $PROSODY_CFG register focus $XMPP_AUTH_DOMAIN $JICOFO_AUTH_PASSWORD

if [[ "$PROSODY_MODE" == "client" ]]; then
    prosodyctl --config $PROSODY_CFG mod_roster_command subscribe focus.$XMPP_DOMAIN focus@$XMPP_AUTH_DOMAIN
fi

if [[ -z $JVB_AUTH_PASSWORD ]]; then
    echo 'FATAL ERROR: JVB auth password must be set'
    exit 1
fi

OLD_JVB_AUTH_PASSWORD=passw0rd
if [[ "$JVB_AUTH_PASSWORD" == "$OLD_JVB_AUTH_PASSWORD" ]]; then
    echo 'FATAL ERROR: JVB auth password must be changed, check the README'
    exit 1
fi

prosodyctl --config $PROSODY_CFG register $JVB_AUTH_USER $XMPP_AUTH_DOMAIN $JVB_AUTH_PASSWORD

if [[ ! -z $JIBRI_XMPP_PASSWORD ]]; then
    OLD_JIBRI_XMPP_PASSWORD=passw0rd
    if [[ "$JIBRI_XMPP_PASSWORD" == "$OLD_JIBRI_XMPP_PASSWORD" ]]; then
        echo 'FATAL ERROR: Jibri auth password must be changed, check the README'
        exit 1
    fi
    prosodyctl --config $PROSODY_CFG register $JIBRI_XMPP_USER $XMPP_AUTH_DOMAIN $JIBRI_XMPP_PASSWORD
fi

if [[ "$PROSODY_MODE" == "client" ]]; then
    if [[ ! -z $JIBRI_RECORDER_PASSWORD ]]; then
        OLD_JIBRI_RECORDER_PASSWORD=passw0rd
        if [[ "$JIBRI_RECORDER_PASSWORD" == "$OLD_JIBRI_RECORDER_PASSWORD" ]]; then
            echo 'FATAL ERROR: Jibri recorder password must be changed, check the README'
            exit 1
        fi
        prosodyctl --config $PROSODY_CFG register $JIBRI_RECORDER_USER $XMPP_HIDDEN_DOMAIN $JIBRI_RECORDER_PASSWORD
    fi
    if [[ "$(echo "$ENABLE_TRANSCRIPTIONS" | tr '[:upper:]' '[:lower:]')" == "true" ]] || [[ "$ENABLE_TRANSCRIPTIONS" == "1" ]]; then
        if [[ ! -z $JIGASI_TRANSCRIBER_PASSWORD ]]; then
            [ -z "$JIGASI_TRANSCRIBER_USER" ] && JIGASI_TRANSCRIBER_USER="transcriber"
            prosodyctl --config $PROSODY_CFG register $JIGASI_TRANSCRIBER_USER $XMPP_HIDDEN_DOMAIN $JIGASI_TRANSCRIBER_PASSWORD
        fi
    fi
fi

if [[ ! -z $JIGASI_XMPP_PASSWORD ]]; then
    OLD_JIGASI_XMPP_PASSWORD=passw0rd
    if [[ "$JIGASI_XMPP_PASSWORD" == "$OLD_JIGASI_XMPP_PASSWORD" ]]; then
        echo 'FATAL ERROR: Jigasi auth password must be changed, check the README'
        exit 1
    fi
    prosodyctl --config $PROSODY_CFG register $JIGASI_XMPP_USER $XMPP_AUTH_DOMAIN $JIGASI_XMPP_PASSWORD
fi

# Generate certificates for all required domains and move them to /config/certs/
if [[ "$PROSODY_MODE" == "visitors" ]]; then
    [ -z "$VISITORS_XMPP_DOMAIN" ] && VISITORS_XMPP_DOMAIN="meet.jitsi"
    [ -z "$PROSODY_VISITOR_INDEX" ] && PROSODY_VISITOR_INDEX=0
    FULL_VISITORS_XMPP_DOMAIN="v$PROSODY_VISITOR_INDEX.$VISITORS_XMPP_DOMAIN"
    if [[ ! -f /config/certs/$FULL_VISITORS_XMPP_DOMAIN.crt ]]; then
        echo "Generating certificate for $FULL_VISITORS_XMPP_DOMAIN"
        echo | prosodyctl --config $PROSODY_CFG cert generate $FULL_VISITORS_XMPP_DOMAIN
        echo "Copying $FULL_VISITORS_XMPP_DOMAIN.crt to /config/certs/"
        cp -f /config/data/$FULL_VISITORS_XMPP_DOMAIN.crt /config/certs/$FULL_VISITORS_XMPP_DOMAIN.crt
        echo "Copying $FULL_VISITORS_XMPP_DOMAIN.key to /config/certs/"
        cp -f /config/data/$FULL_VISITORS_XMPP_DOMAIN.key /config/certs/$FULL_VISITORS_XMPP_DOMAIN.key
        chown prosody:prosody /config/certs/$FULL_VISITORS_XMPP_DOMAIN.{crt,key}
        chmod 640 /config/certs/$FULL_VISITORS_XMPP_DOMAIN.{crt,key}
    fi
elif [[ "$PROSODY_MODE" == "brewery" ]]; then
    echo "No need to generate certs for main XMPP domain in brewery mode"
else
    if [[ ! -f /config/certs/$XMPP_DOMAIN.crt ]]; then
        echo "Generating certificate for $XMPP_DOMAIN"
        echo | prosodyctl --config $PROSODY_CFG cert generate $XMPP_DOMAIN
        echo "Copying $XMPP_DOMAIN.crt to /config/certs/"
        cp -f /config/data/$XMPP_DOMAIN.crt /config/certs/$XMPP_DOMAIN.crt
        echo "Copying $XMPP_DOMAIN.key to /config/certs/"
        cp -f /config/data/$XMPP_DOMAIN.key /config/certs/$XMPP_DOMAIN.key
        chown prosody:prosody /config/certs/$XMPP_DOMAIN.{crt,key}
        chmod 640 /config/certs/$XMPP_DOMAIN.{crt,key}
    else
        echo "Certificate for $XMPP_DOMAIN already exists, skipping generation"
    fi
fi

if [[ ! -f /config/certs/$XMPP_AUTH_DOMAIN.crt ]]; then
    echo "Generating certificate for $XMPP_AUTH_DOMAIN"
    echo | prosodyctl --config $PROSODY_CFG cert generate $XMPP_AUTH_DOMAIN
    echo "Copying $XMPP_AUTH_DOMAIN.crt to /config/certs/"
    cp -f /config/data/$XMPP_AUTH_DOMAIN.crt /config/certs/$XMPP_AUTH_DOMAIN.crt
    echo "Copying $XMPP_AUTH_DOMAIN.key to /config/certs/"
    cp -f /config/data/$XMPP_AUTH_DOMAIN.key /config/certs/$XMPP_AUTH_DOMAIN.key
    chown prosody:prosody /config/certs/$XMPP_AUTH_DOMAIN.{crt,key}
    chmod 640 /config/certs/$XMPP_AUTH_DOMAIN.{crt,key}
else
    echo "Certificate for $XMPP_AUTH_DOMAIN already exists, skipping generation"
fi

# Generate and move recorder.meet.jitsi certificates if they don't exist
if [[ ! -f /config/certs/recorder.meet.jitsi.crt ]]; then
    echo "Generating certificate for recorder.meet.jitsi"
    echo | prosodyctl --config $PROSODY_CFG cert generate recorder.meet.jitsi
    echo "Copying recorder.meet.jitsi.crt to /config/certs/"
    cp -f /config/data/recorder.meet.jitsi.crt /config/certs/recorder.meet.jitsi.crt
    echo "Copying recorder.meet.jitsi.key to /config/certs/"
    cp -f /config/data/recorder.meet.jitsi.key /config/certs/recorder.meet.jitsi.key
    chown prosody:prosody /config/certs/recorder.meet.jitsi.{crt,key}
    chmod 640 /config/certs/recorder.meet.jitsi.{crt,key}
else
    echo "Certificate for recorder.meet.jitsi already exists, skipping generation"
fi

# Ensure all certificates have correct ownership and permissions
chown prosody:prosody /config/certs/*.{crt,key}
chmod 640 /config/certs/*.{crt,key}

# Clean up .cnf files
rm -f /config/data/*.cnf
